// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: category.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
insert into category (name) values ($1) returning id, name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createScoreCategory = `-- name: CreateScoreCategory :exec
insert into score_category (score_id, category_id) values ($1, $2)
`

type CreateScoreCategoryParams struct {
	ScoreID    uuid.UUID `db:"score_id" json:"score_id"`
	CategoryID int32     `db:"category_id" json:"category_id"`
}

func (q *Queries) CreateScoreCategory(ctx context.Context, arg CreateScoreCategoryParams) error {
	_, err := q.db.Exec(ctx, createScoreCategory, arg.ScoreID, arg.CategoryID)
	return err
}

const deleteCategory = `-- name: DeleteCategory :exec
delete from category where id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const deleteScoreCategory = `-- name: DeleteScoreCategory :exec
delete from score_category where score_id = $1
`

func (q *Queries) DeleteScoreCategory(ctx context.Context, scoreID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteScoreCategory, scoreID)
	return err
}

const getCategories = `-- name: GetCategories :many
select id, name from category
`

func (q *Queries) GetCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :exec
update category set name = $1 where id = $2
`

type UpdateCategoryParams struct {
	Name string `db:"name" json:"name"`
	ID   int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.Exec(ctx, updateCategory, arg.Name, arg.ID)
	return err
}

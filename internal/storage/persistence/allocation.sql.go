// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: allocation.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAllocation = `-- name: CreateAllocation :one
insert into allocation (name) values ($1) returning id, name
`

func (q *Queries) CreateAllocation(ctx context.Context, name string) (Allocation, error) {
	row := q.db.QueryRow(ctx, createAllocation, name)
	var i Allocation
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createScoreAllocation = `-- name: CreateScoreAllocation :exec
insert into score_allocation (score_id, allocation_id) values ($1, $2)
`

type CreateScoreAllocationParams struct {
	ScoreID      uuid.UUID `db:"score_id" json:"score_id"`
	AllocationID int32     `db:"allocation_id" json:"allocation_id"`
}

func (q *Queries) CreateScoreAllocation(ctx context.Context, arg CreateScoreAllocationParams) error {
	_, err := q.db.Exec(ctx, createScoreAllocation, arg.ScoreID, arg.AllocationID)
	return err
}

const deleteAllocation = `-- name: DeleteAllocation :exec
delete from allocation where id = $1
`

func (q *Queries) DeleteAllocation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAllocation, id)
	return err
}

const deleteScoreAllocation = `-- name: DeleteScoreAllocation :exec
delete from score_allocation where score_id = $1
`

func (q *Queries) DeleteScoreAllocation(ctx context.Context, scoreID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteScoreAllocation, scoreID)
	return err
}

const getAllocations = `-- name: GetAllocations :many
select id, name from allocation
`

func (q *Queries) GetAllocations(ctx context.Context) ([]Allocation, error) {
	rows, err := q.db.Query(ctx, getAllocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Allocation{}
	for rows.Next() {
		var i Allocation
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAllocation = `-- name: UpdateAllocation :exec
update allocation set name = $1 where id = $2
`

type UpdateAllocationParams struct {
	Name string `db:"name" json:"name"`
	ID   int32  `db:"id" json:"id"`
}

func (q *Queries) UpdateAllocation(ctx context.Context, arg UpdateAllocationParams) error {
	_, err := q.db.Exec(ctx, updateAllocation, arg.Name, arg.ID)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type ContentType string

const (
	ContentTypeExclusive    ContentType = "exclusive"
	ContentTypeNonExclusive ContentType = "non-exclusive"
)

func (e *ContentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContentType(s)
	case string:
		*e = ContentType(s)
	default:
		return fmt.Errorf("unsupported scan type for ContentType: %T", src)
	}
	return nil
}

type NullContentType struct {
	ContentType ContentType `json:"content_type"`
	Valid       bool        `json:"valid"` // Valid is true if ContentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContentType) Scan(value interface{}) error {
	if value == nil {
		ns.ContentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContentType), nil
}

type Difficulty string

const (
	DifficultyBeginner     Difficulty = "beginner"
	DifficultyIntermediate Difficulty = "intermediate"
	DifficultyAdvanced     Difficulty = "advanced"
)

func (e *Difficulty) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Difficulty(s)
	case string:
		*e = Difficulty(s)
	default:
		return fmt.Errorf("unsupported scan type for Difficulty: %T", src)
	}
	return nil
}

type NullDifficulty struct {
	Difficulty Difficulty `json:"difficulty"`
	Valid      bool       `json:"valid"` // Valid is true if Difficulty is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDifficulty) Scan(value interface{}) error {
	if value == nil {
		ns.Difficulty, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Difficulty.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDifficulty) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Difficulty), nil
}

type Rolename string

const (
	RolenameAdmin       Rolename = "admin"
	RolenameContributor Rolename = "contributor"
	RolenameUser        Rolename = "user"
)

func (e *Rolename) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Rolename(s)
	case string:
		*e = Rolename(s)
	default:
		return fmt.Errorf("unsupported scan type for Rolename: %T", src)
	}
	return nil
}

type NullRolename struct {
	Rolename Rolename `json:"rolename"`
	Valid    bool     `json:"valid"` // Valid is true if Rolename is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolename) Scan(value interface{}) error {
	if value == nil {
		ns.Rolename, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Rolename.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolename) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Rolename), nil
}

type Account struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	Name       string             `db:"name" json:"name"`
	Email      string             `db:"email" json:"email"`
	PictureUrl pgtype.Text        `db:"picture_url" json:"picture_url"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	RoleID     uuid.UUID          `db:"role_id" json:"role_id"`
}

type Allocation struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

type Category struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

type Contributor struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	IsVerified pgtype.Bool        `db:"is_verified" json:"is_verified"`
	FullName   string             `db:"full_name" json:"full_name"`
	VerifiedAt pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type ContributorAccountScore struct {
	ID         uuid.UUID              `db:"id" json:"id"`
	IsVerified pgtype.Bool            `db:"is_verified" json:"is_verified"`
	FullName   string                 `db:"full_name" json:"full_name"`
	VerifiedAt pgtype.Timestamptz     `db:"verified_at" json:"verified_at"`
	CreatedAt  time.Time              `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz     `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz     `db:"deleted_at" json:"deleted_at"`
	Email      string                 `db:"email" json:"email"`
	Scores     []ScoreContributorView `db:"scores" json:"scores"`
}

type ContributorApply struct {
	ID                         uuid.UUID          `db:"id" json:"id"`
	AccountID                  uuid.UUID          `db:"account_id" json:"account_id"`
	FullName                   string             `db:"full_name" json:"full_name"`
	PhoneNumber                string             `db:"phone_number" json:"phone_number"`
	MusicalBackground          string             `db:"musical_background" json:"musical_background"`
	Education                  pgtype.Text        `db:"education" json:"education"`
	Experience                 pgtype.Text        `db:"experience" json:"experience"`
	PortofolioLink             pgtype.Text        `db:"portofolio_link" json:"portofolio_link"`
	TermsAndConditionsAccepted bool               `db:"terms_and_conditions_accepted" json:"terms_and_conditions_accepted"`
	SampleUrl                  pgtype.Text        `db:"sample_url" json:"sample_url"`
	CreatedAt                  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt                  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
}

type Instrument struct {
	ID   int32  `db:"id" json:"id"`
	Name string `db:"name" json:"name"`
}

type Payment struct {
	ID              uuid.UUID          `db:"id" json:"id"`
	PurchaseID      uuid.UUID          `db:"purchase_id" json:"purchase_id"`
	Price           pgtype.Numeric     `db:"price" json:"price"`
	Revenue         pgtype.Numeric     `db:"revenue" json:"revenue"`
	FeePercentage   int32              `db:"fee_percentage" json:"fee_percentage"`
	PaymentProofUrl pgtype.Text        `db:"payment_proof_url" json:"payment_proof_url"`
	PaymentMethod   pgtype.Text        `db:"payment_method" json:"payment_method"`
	AccountNumber   pgtype.Text        `db:"account_number" json:"account_number"`
	BankName        pgtype.Text        `db:"bank_name" json:"bank_name"`
	PaidAt          pgtype.Timestamptz `db:"paid_at" json:"paid_at"`
	IsVerified      bool               `db:"is_verified" json:"is_verified"`
	VerifiedAt      pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	CreatedAt       time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type PaymentMethod struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	Method        string             `db:"method" json:"method"`
	BankName      string             `db:"bank_name" json:"bank_name"`
	AccountNumber string             `db:"account_number" json:"account_number"`
	ContributorID uuid.UUID          `db:"contributor_id" json:"contributor_id"`
	CreatedAt     time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Purchase struct {
	ID              uuid.UUID          `db:"id" json:"id"`
	InvoiceSerial   int32              `db:"invoice_serial" json:"invoice_serial"`
	AccountID       uuid.UUID          `db:"account_id" json:"account_id"`
	ScoreID         uuid.UUID          `db:"score_id" json:"score_id"`
	Price           pgtype.Numeric     `db:"price" json:"price"`
	Title           string             `db:"title" json:"title"`
	PaymentProofUrl pgtype.Text        `db:"payment_proof_url" json:"payment_proof_url"`
	PaidAt          pgtype.Timestamptz `db:"paid_at" json:"paid_at"`
	IsVerified      bool               `db:"is_verified" json:"is_verified"`
	VerifiedAt      pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	CreatedAt       time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt       pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt       pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Role struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	Name      Rolename           `db:"name" json:"name"`
	CreatedAt time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Score struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	ContributorID uuid.UUID          `db:"contributor_id" json:"contributor_id"`
	Title         string             `db:"title" json:"title"`
	Description   pgtype.Text        `db:"description" json:"description"`
	Price         pgtype.Numeric     `db:"price" json:"price"`
	IsVerified    bool               `db:"is_verified" json:"is_verified"`
	ContentType   ContentType        `db:"content_type" json:"content_type"`
	PurchasedBy   pgtype.UUID        `db:"purchased_by" json:"purchased_by"`
	VerifiedAt    pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	Difficulty    Difficulty         `db:"difficulty" json:"difficulty"`
	PdfUrl        string             `db:"pdf_url" json:"pdf_url"`
	PdfImageUrls  []string           `db:"pdf_image_urls" json:"pdf_image_urls"`
	AudioUrl      string             `db:"audio_url" json:"audio_url"`
	CreatedAt     time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type ScoreAllocation struct {
	ScoreID      uuid.UUID `db:"score_id" json:"score_id"`
	AllocationID int32     `db:"allocation_id" json:"allocation_id"`
}

type ScoreCategory struct {
	ScoreID    uuid.UUID `db:"score_id" json:"score_id"`
	CategoryID int32     `db:"category_id" json:"category_id"`
}

type ScoreContributorView struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	Title         string             `db:"title" json:"title"`
	Description   pgtype.Text        `db:"description" json:"description"`
	IsVerified    bool               `db:"is_verified" json:"is_verified"`
	Price         pgtype.Numeric     `db:"price" json:"price"`
	Difficulty    Difficulty         `db:"difficulty" json:"difficulty"`
	ContentType   ContentType        `db:"content_type" json:"content_type"`
	PurchasedBy   pgtype.UUID        `db:"purchased_by" json:"purchased_by"`
	PdfImageUrls  []string           `db:"pdf_image_urls" json:"pdf_image_urls"`
	PdfUrl        string             `db:"pdf_url" json:"pdf_url"`
	AudioUrl      string             `db:"audio_url" json:"audio_url"`
	CreatedAt     time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Email         string             `db:"email" json:"email"`
	FullName      string             `db:"full_name" json:"full_name"`
	ContributorID uuid.UUID          `db:"contributor_id" json:"contributor_id"`
	Instruments   []int              `db:"instruments" json:"instruments"`
	Allocations   []int              `db:"allocations" json:"allocations"`
	Categories    []int              `db:"categories" json:"categories"`
}

type ScoreInstrument struct {
	ScoreID      uuid.UUID `db:"score_id" json:"score_id"`
	InstrumentID int32     `db:"instrument_id" json:"instrument_id"`
}

type ScoreLibraryView struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	Title         string             `db:"title" json:"title"`
	Description   pgtype.Text        `db:"description" json:"description"`
	IsVerified    bool               `db:"is_verified" json:"is_verified"`
	Price         pgtype.Numeric     `db:"price" json:"price"`
	Difficulty    Difficulty         `db:"difficulty" json:"difficulty"`
	ContentType   ContentType        `db:"content_type" json:"content_type"`
	PurchasedBy   pgtype.UUID        `db:"purchased_by" json:"purchased_by"`
	PdfImageUrls  []string           `db:"pdf_image_urls" json:"pdf_image_urls"`
	PdfUrl        string             `db:"pdf_url" json:"pdf_url"`
	AudioUrl      string             `db:"audio_url" json:"audio_url"`
	CreatedAt     time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Email         string             `db:"email" json:"email"`
	AuthorName    string             `db:"author_name" json:"author_name"`
	ContributorID uuid.UUID          `db:"contributor_id" json:"contributor_id"`
	Instruments   interface{}        `db:"instruments" json:"instruments"`
	Allocations   interface{}        `db:"allocations" json:"allocations"`
	Categories    interface{}        `db:"categories" json:"categories"`
}

type ScorePublicView struct {
	ID           uuid.UUID          `db:"id" json:"id"`
	Title        string             `db:"title" json:"title"`
	Description  pgtype.Text        `db:"description" json:"description"`
	IsVerified   bool               `db:"is_verified" json:"is_verified"`
	Price        pgtype.Numeric     `db:"price" json:"price"`
	Difficulty   Difficulty         `db:"difficulty" json:"difficulty"`
	ContentType  ContentType        `db:"content_type" json:"content_type"`
	PurchasedBy  pgtype.UUID        `db:"purchased_by" json:"purchased_by"`
	PdfImageUrls []string           `db:"pdf_image_urls" json:"pdf_image_urls"`
	AudioUrl     string             `db:"audio_url" json:"audio_url"`
	CreatedAt    time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt    pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Email        string             `db:"email" json:"email"`
	FullName     string             `db:"full_name" json:"full_name"`
	Instruments  []string           `db:"instruments" json:"instruments"`
	Allocations  []string           `db:"allocations" json:"allocations"`
	Categories   []string           `db:"categories" json:"categories"`
}

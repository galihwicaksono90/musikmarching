// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Rolename string

const (
	RolenameAdmin       Rolename = "admin"
	RolenameContributor Rolename = "contributor"
	RolenameUser        Rolename = "user"
)

func (e *Rolename) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Rolename(s)
	case string:
		*e = Rolename(s)
	default:
		return fmt.Errorf("unsupported scan type for Rolename: %T", src)
	}
	return nil
}

type NullRolename struct {
	Rolename Rolename `json:"rolename"`
	Valid    bool     `json:"valid"` // Valid is true if Rolename is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRolename) Scan(value interface{}) error {
	if value == nil {
		ns.Rolename, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Rolename.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRolename) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Rolename), nil
}

type Account struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	Name       string             `db:"name" json:"name"`
	Email      string             `db:"email" json:"email"`
	PictureUrl pgtype.Text        `db:"picture_url" json:"picture_url"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	RoleID     uuid.UUID          `db:"role_id" json:"role_id"`
}

type Contributor struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	Isverified pgtype.Bool        `db:"isverified" json:"isverified"`
	VerifiedAt pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type ContributorScoreUpload struct {
	ContributorID uuid.UUID `db:"contributor_id" json:"contributor_id"`
	ScoreID       uuid.UUID `db:"score_id" json:"score_id"`
}

type Profile struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	Name      pgtype.Text        `db:"name" json:"name"`
	CreatedAt time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Role struct {
	ID        uuid.UUID          `db:"id" json:"id"`
	Name      Rolename           `db:"name" json:"name"`
	CreatedAt time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

type Score struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	Title      string             `db:"title" json:"title"`
	Isverified bool               `db:"isverified" json:"isverified"`
	Verifiedat pgtype.Timestamptz `db:"verifiedat" json:"verifiedat"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt  pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: score.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createScore = `-- name: CreateScore :one
insert into score (
  title,
  price,
  pdf_url,
  pdf_image_urls,
  audio_url,
  contributor_id,
  description,
  content_type,
  difficulty
) values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9
) returning id
`

type CreateScoreParams struct {
	Title         string         `db:"title" json:"title"`
	Price         pgtype.Numeric `db:"price" json:"price"`
	PdfUrl        string         `db:"pdf_url" json:"pdf_url"`
	PdfImageUrls  []string       `db:"pdf_image_urls" json:"pdf_image_urls"`
	AudioUrl      string         `db:"audio_url" json:"audio_url"`
	ContributorID uuid.UUID      `db:"contributor_id" json:"contributor_id"`
	Description   pgtype.Text    `db:"description" json:"description"`
	ContentType   ContentType    `db:"content_type" json:"content_type"`
	Difficulty    Difficulty     `db:"difficulty" json:"difficulty"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createScore,
		arg.Title,
		arg.Price,
		arg.PdfUrl,
		arg.PdfImageUrls,
		arg.AudioUrl,
		arg.ContributorID,
		arg.Description,
		arg.ContentType,
		arg.Difficulty,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteScore = `-- name: DeleteScore :exec
update score s set
  deleted_at = now(),
  updated_at = now()
where s.id = $1 
and s.contributor_id = $2::uuid
`

type DeleteScoreParams struct {
	ID            uuid.UUID `db:"id" json:"id"`
	ContributorID uuid.UUID `db:"contributor_id" json:"contributor_id"`
}

func (q *Queries) DeleteScore(ctx context.Context, arg DeleteScoreParams) error {
	_, err := q.db.Exec(ctx, deleteScore, arg.ID, arg.ContributorID)
	return err
}

const getAllPublicScores = `-- name: GetAllPublicScores :many
select spv.id, spv.title, spv.description, spv.is_verified, spv.price, spv.difficulty, spv.content_type, spv.purchased_by, spv.pdf_image_urls, spv.audio_url, spv.created_at, spv.updated_at, spv.deleted_at, spv.email, spv.full_name, spv.instruments, spv.allocations, spv.categories, count(*) over() as count 
from score_public_view spv
where spv.is_verified = true and spv.deleted_at is null and spv.purchased_by is null
and ($1::text IS NULL OR lower(spv.title) like lower($1))
and ($2::difficulty IS NULL OR spv.difficulty in ($2))
and ($3::content_type IS NULL OR spv.content_type in ($3))
and ($4::text[] IS NULL or spv.instruments::text[] && $4::text[])
and ($5::text[] IS NULL or spv.categories::text[] && $5::text[])
and ($6::text[] IS NULL or spv.allocations::text[] && $6::text[])
order by spv.created_at desc
limit $8::int
offset $7::int
`

type GetAllPublicScoresParams struct {
	Title       string          `db:"title" json:"title"`
	Difficulty  NullDifficulty  `db:"difficulty" json:"difficulty"`
	ContentType NullContentType `db:"content_type" json:"content_type"`
	Instruments []string        `db:"instruments" json:"instruments"`
	Categories  []string        `db:"categories" json:"categories"`
	Allocations []string        `db:"allocations" json:"allocations"`
	PageOffset  int32           `db:"page_offset" json:"page_offset"`
	PageLimit   int32           `db:"page_limit" json:"page_limit"`
}

type GetAllPublicScoresRow struct {
	ScorePublicView ScorePublicView `db:"score_public_view" json:"score_public_view"`
	Count           int64           `db:"count" json:"count"`
}

func (q *Queries) GetAllPublicScores(ctx context.Context, arg GetAllPublicScoresParams) ([]GetAllPublicScoresRow, error) {
	rows, err := q.db.Query(ctx, getAllPublicScores,
		arg.Title,
		arg.Difficulty,
		arg.ContentType,
		arg.Instruments,
		arg.Categories,
		arg.Allocations,
		arg.PageOffset,
		arg.PageLimit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPublicScoresRow{}
	for rows.Next() {
		var i GetAllPublicScoresRow
		if err := rows.Scan(
			&i.ScorePublicView.ID,
			&i.ScorePublicView.Title,
			&i.ScorePublicView.Description,
			&i.ScorePublicView.IsVerified,
			&i.ScorePublicView.Price,
			&i.ScorePublicView.Difficulty,
			&i.ScorePublicView.ContentType,
			&i.ScorePublicView.PurchasedBy,
			&i.ScorePublicView.PdfImageUrls,
			&i.ScorePublicView.AudioUrl,
			&i.ScorePublicView.CreatedAt,
			&i.ScorePublicView.UpdatedAt,
			&i.ScorePublicView.DeletedAt,
			&i.ScorePublicView.Email,
			&i.ScorePublicView.FullName,
			&i.ScorePublicView.Instruments,
			&i.ScorePublicView.Allocations,
			&i.ScorePublicView.Categories,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPublicScoreById = `-- name: GetPublicScoreById :one
select id, title, description, is_verified, price, difficulty, content_type, purchased_by, pdf_image_urls, audio_url, created_at, updated_at, deleted_at, email, full_name, instruments, allocations, categories from score_public_view spv
where spv.id = $1
and spv.is_verified = true 
and spv.deleted_at is null
and spv.purchased_by is null
limit 1
`

func (q *Queries) GetPublicScoreById(ctx context.Context, id uuid.UUID) (ScorePublicView, error) {
	row := q.db.QueryRow(ctx, getPublicScoreById, id)
	var i ScorePublicView
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsVerified,
		&i.Price,
		&i.Difficulty,
		&i.ContentType,
		&i.PurchasedBy,
		&i.PdfImageUrls,
		&i.AudioUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.FullName,
		&i.Instruments,
		&i.Allocations,
		&i.Categories,
	)
	return i, err
}

const getScoreByContributorID = `-- name: GetScoreByContributorID :one

select id, title, description, is_verified, price, difficulty, content_type, purchased_by, pdf_image_urls, pdf_url, audio_url, created_at, updated_at, deleted_at, email, full_name, contributor_id, instruments, allocations, categories from score_contributor_view scv
where scv.id = $1
and scv.contributor_id = $2
limit 1
`

type GetScoreByContributorIDParams struct {
	ScoreID       uuid.UUID `db:"score_id" json:"score_id"`
	ContributorID uuid.UUID `db:"contributor_id" json:"contributor_id"`
}

// select * from score_contributor_view scv
// where scv.contributor_id = @contributor_id
// limit @pagelimit::int
// offset @pageoffset::int
// ;
func (q *Queries) GetScoreByContributorID(ctx context.Context, arg GetScoreByContributorIDParams) (ScoreContributorView, error) {
	row := q.db.QueryRow(ctx, getScoreByContributorID, arg.ScoreID, arg.ContributorID)
	var i ScoreContributorView
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsVerified,
		&i.Price,
		&i.Difficulty,
		&i.ContentType,
		&i.PurchasedBy,
		&i.PdfImageUrls,
		&i.PdfUrl,
		&i.AudioUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Email,
		&i.FullName,
		&i.ContributorID,
		&i.Instruments,
		&i.Allocations,
		&i.Categories,
	)
	return i, err
}

const getScoreById = `-- name: GetScoreById :one
select id, contributor_id, title, description, price, is_verified, content_type, purchased_by, verified_at, difficulty, pdf_url, pdf_image_urls, audio_url, created_at, updated_at, deleted_at
from score s
where s.id = $1
`

func (q *Queries) GetScoreById(ctx context.Context, id uuid.UUID) (Score, error) {
	row := q.db.QueryRow(ctx, getScoreById, id)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.ContributorID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.IsVerified,
		&i.ContentType,
		&i.PurchasedBy,
		&i.VerifiedAt,
		&i.Difficulty,
		&i.PdfUrl,
		&i.PdfImageUrls,
		&i.AudioUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getScoreLibrary = `-- name: GetScoreLibrary :many
with purchases as (
  select score_id from purchase  
  where account_id = $3::uuid
  and is_verified = true
)
select score_library_view.id, score_library_view.title, score_library_view.description, score_library_view.is_verified, score_library_view.price, score_library_view.difficulty, score_library_view.content_type, score_library_view.purchased_by, score_library_view.pdf_image_urls, score_library_view.pdf_url, score_library_view.audio_url, score_library_view.created_at, score_library_view.updated_at, score_library_view.deleted_at, score_library_view.email, score_library_view.author_name, score_library_view.contributor_id, score_library_view.instruments, score_library_view.allocations, score_library_view.categories,  count(*) over() as count
from score_library_view
where id in (select score_id from purchases)
limit $2::int
offset $1::int
`

type GetScoreLibraryParams struct {
	PageOffset int32     `db:"page_offset" json:"page_offset"`
	PageLimit  int32     `db:"page_limit" json:"page_limit"`
	AccountID  uuid.UUID `db:"account_id" json:"account_id"`
}

type GetScoreLibraryRow struct {
	ScoreLibraryView ScoreLibraryView `db:"score_library_view" json:"score_library_view"`
	Count            int64            `db:"count" json:"count"`
}

func (q *Queries) GetScoreLibrary(ctx context.Context, arg GetScoreLibraryParams) ([]GetScoreLibraryRow, error) {
	rows, err := q.db.Query(ctx, getScoreLibrary, arg.PageOffset, arg.PageLimit, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetScoreLibraryRow{}
	for rows.Next() {
		var i GetScoreLibraryRow
		if err := rows.Scan(
			&i.ScoreLibraryView.ID,
			&i.ScoreLibraryView.Title,
			&i.ScoreLibraryView.Description,
			&i.ScoreLibraryView.IsVerified,
			&i.ScoreLibraryView.Price,
			&i.ScoreLibraryView.Difficulty,
			&i.ScoreLibraryView.ContentType,
			&i.ScoreLibraryView.PurchasedBy,
			&i.ScoreLibraryView.PdfImageUrls,
			&i.ScoreLibraryView.PdfUrl,
			&i.ScoreLibraryView.AudioUrl,
			&i.ScoreLibraryView.CreatedAt,
			&i.ScoreLibraryView.UpdatedAt,
			&i.ScoreLibraryView.DeletedAt,
			&i.ScoreLibraryView.Email,
			&i.ScoreLibraryView.AuthorName,
			&i.ScoreLibraryView.ContributorID,
			&i.ScoreLibraryView.Instruments,
			&i.ScoreLibraryView.Allocations,
			&i.ScoreLibraryView.Categories,
			&i.Count,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScores = `-- name: GetScores :many
select s.id, s.title, s.is_verified, s.price, a.name, a.email
from score s
inner join contributor c on c.id = s.contributor_id
inner join account a on a.id = s.contributor_id
order by s.created_at desc
limit $2::int
offset $1::int
`

type GetScoresParams struct {
	Pageoffset int32 `db:"pageoffset" json:"pageoffset"`
	Pagelimit  int32 `db:"pagelimit" json:"pagelimit"`
}

type GetScoresRow struct {
	ID         uuid.UUID      `db:"id" json:"id"`
	Title      string         `db:"title" json:"title"`
	IsVerified bool           `db:"is_verified" json:"is_verified"`
	Price      pgtype.Numeric `db:"price" json:"price"`
	Name       string         `db:"name" json:"name"`
	Email      string         `db:"email" json:"email"`
}

func (q *Queries) GetScores(ctx context.Context, arg GetScoresParams) ([]GetScoresRow, error) {
	rows, err := q.db.Query(ctx, getScores, arg.Pageoffset, arg.Pagelimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetScoresRow{}
	for rows.Next() {
		var i GetScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsVerified,
			&i.Price,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoresByContributorID = `-- name: GetScoresByContributorID :many
select scv.id, scv.title, scv.description, scv.is_verified, scv.price, scv.difficulty, scv.content_type, scv.purchased_by, scv.pdf_image_urls, scv.pdf_url, scv.audio_url, scv.created_at, scv.updated_at, scv.deleted_at, scv.email, scv.full_name, scv.contributor_id, scv.instruments, scv.allocations, scv.categories, coalesce(p.purchase_count, 0)
from score_contributor_view scv
left join (
    select p.score_id, count(*) as purchase_count
    from purchase p
    inner join payment pm on pm.purchase_id = p.id
    group by p.score_id
) p on p.score_id = scv.id
where scv.contributor_id = $1::uuid
`

type GetScoresByContributorIDRow struct {
	ID            uuid.UUID          `db:"id" json:"id"`
	Title         string             `db:"title" json:"title"`
	Description   pgtype.Text        `db:"description" json:"description"`
	IsVerified    bool               `db:"is_verified" json:"is_verified"`
	Price         pgtype.Numeric     `db:"price" json:"price"`
	Difficulty    Difficulty         `db:"difficulty" json:"difficulty"`
	ContentType   ContentType        `db:"content_type" json:"content_type"`
	PurchasedBy   pgtype.UUID        `db:"purchased_by" json:"purchased_by"`
	PdfImageUrls  []string           `db:"pdf_image_urls" json:"pdf_image_urls"`
	PdfUrl        string             `db:"pdf_url" json:"pdf_url"`
	AudioUrl      string             `db:"audio_url" json:"audio_url"`
	CreatedAt     time.Time          `db:"created_at" json:"created_at"`
	UpdatedAt     pgtype.Timestamptz `db:"updated_at" json:"updated_at"`
	DeletedAt     pgtype.Timestamptz `db:"deleted_at" json:"deleted_at"`
	Email         string             `db:"email" json:"email"`
	FullName      string             `db:"full_name" json:"full_name"`
	ContributorID uuid.UUID          `db:"contributor_id" json:"contributor_id"`
	Instruments   []int              `db:"instruments" json:"instruments"`
	Allocations   []int              `db:"allocations" json:"allocations"`
	Categories    []int              `db:"categories" json:"categories"`
	PurchaseCount int64              `db:"purchase_count" json:"purchase_count"`
}

func (q *Queries) GetScoresByContributorID(ctx context.Context, contributorID uuid.UUID) ([]GetScoresByContributorIDRow, error) {
	rows, err := q.db.Query(ctx, getScoresByContributorID, contributorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetScoresByContributorIDRow{}
	for rows.Next() {
		var i GetScoresByContributorIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsVerified,
			&i.Price,
			&i.Difficulty,
			&i.ContentType,
			&i.PurchasedBy,
			&i.PdfImageUrls,
			&i.PdfUrl,
			&i.AudioUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Email,
			&i.FullName,
			&i.ContributorID,
			&i.Instruments,
			&i.Allocations,
			&i.Categories,
			&i.PurchaseCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoresPaginated = `-- name: GetScoresPaginated :many
select id, contributor_id, title, description, price, is_verified, content_type, purchased_by, verified_at, difficulty, pdf_url, pdf_image_urls, audio_url, created_at, updated_at, deleted_at
from score
where deleted_at is null
`

func (q *Queries) GetScoresPaginated(ctx context.Context) ([]Score, error) {
	rows, err := q.db.Query(ctx, getScoresPaginated)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.ContributorID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.IsVerified,
			&i.ContentType,
			&i.PurchasedBy,
			&i.VerifiedAt,
			&i.Difficulty,
			&i.PdfUrl,
			&i.PdfImageUrls,
			&i.AudioUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerifiedScoreById = `-- name: GetVerifiedScoreById :one
select s.id, s.title, s.price, a.name as contributor_name
from score s
inner join contributor c on c.id = s.contributor_id
inner join account a on a.id = s.contributor_id
where s.is_verified = true and s.id = $1
`

type GetVerifiedScoreByIdRow struct {
	ID              uuid.UUID      `db:"id" json:"id"`
	Title           string         `db:"title" json:"title"`
	Price           pgtype.Numeric `db:"price" json:"price"`
	ContributorName string         `db:"contributor_name" json:"contributor_name"`
}

func (q *Queries) GetVerifiedScoreById(ctx context.Context, id uuid.UUID) (GetVerifiedScoreByIdRow, error) {
	row := q.db.QueryRow(ctx, getVerifiedScoreById, id)
	var i GetVerifiedScoreByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.ContributorName,
	)
	return i, err
}

const getVerifiedScores = `-- name: GetVerifiedScores :many
select s.id, s.title, s.price, a.name, a.email
from score s
inner join contributor c on c.id = s.contributor_id
inner join account a on a.id = s.contributor_id
where s.is_verified = true and c.is_verified = true
limit $2::int
offset $1::int
`

type GetVerifiedScoresParams struct {
	PageOffset int32 `db:"page_offset" json:"page_offset"`
	PageLimit  int32 `db:"page_limit" json:"page_limit"`
}

type GetVerifiedScoresRow struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Title string         `db:"title" json:"title"`
	Price pgtype.Numeric `db:"price" json:"price"`
	Name  string         `db:"name" json:"name"`
	Email string         `db:"email" json:"email"`
}

func (q *Queries) GetVerifiedScores(ctx context.Context, arg GetVerifiedScoresParams) ([]GetVerifiedScoresRow, error) {
	rows, err := q.db.Query(ctx, getVerifiedScores, arg.PageOffset, arg.PageLimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVerifiedScoresRow{}
	for rows.Next() {
		var i GetVerifiedScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScore = `-- name: UpdateScore :exec
update score set
  title = COALESCE($1, title),
  price = COALESCE($2, price),
  description = COALESCE($3, description),
  difficulty = COALESCE($4, difficulty),
  content_type = COALESCE($5, content_type),
  pdf_url = COALESCE($6, pdf_url),
  pdf_image_urls = COALESCE($7, pdf_image_urls),
  audio_url = COALESCE($8, audio_url),
  updated_at = now()
where id = $9
`

type UpdateScoreParams struct {
	Title        pgtype.Text     `db:"title" json:"title"`
	Price        pgtype.Numeric  `db:"price" json:"price"`
	Description  pgtype.Text     `db:"description" json:"description"`
	Difficulty   NullDifficulty  `db:"difficulty" json:"difficulty"`
	ContentType  NullContentType `db:"content_type" json:"content_type"`
	PdfUrl       pgtype.Text     `db:"pdf_url" json:"pdf_url"`
	PdfImageUrls []string        `db:"pdf_image_urls" json:"pdf_image_urls"`
	AudioUrl     pgtype.Text     `db:"audio_url" json:"audio_url"`
	ID           uuid.UUID       `db:"id" json:"id"`
}

func (q *Queries) UpdateScore(ctx context.Context, arg UpdateScoreParams) error {
	_, err := q.db.Exec(ctx, updateScore,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.Difficulty,
		arg.ContentType,
		arg.PdfUrl,
		arg.PdfImageUrls,
		arg.AudioUrl,
		arg.ID,
	)
	return err
}

const verifyScore = `-- name: VerifyScore :exec
update score set
  is_verified = true,
  verified_at = now()
where id = $1
`

func (q *Queries) VerifyScore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyScore, id)
	return err
}

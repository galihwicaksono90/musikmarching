// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: score.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getVerifiedScoreById = `-- name: GetVerifiedScoreById :one
select 
  s.id,
  s.title,
  s.price,
  a.name as contributor_name
from score s
inner join contributor c on c.id = s.contributor_id
inner join account a  on a.id = s.contributor_id
where s.is_verified = true and s.id = $1
`

type GetVerifiedScoreByIdRow struct {
	ID              uuid.UUID      `db:"id" json:"id"`
	Title           string         `db:"title" json:"title"`
	Price           pgtype.Numeric `db:"price" json:"price"`
	ContributorName string         `db:"contributor_name" json:"contributor_name"`
}

func (q *Queries) GetVerifiedScoreById(ctx context.Context, id uuid.UUID) (GetVerifiedScoreByIdRow, error) {
	row := q.db.QueryRow(ctx, getVerifiedScoreById, id)
	var i GetVerifiedScoreByIdRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.ContributorName,
	)
	return i, err
}

const getVerifiedScores = `-- name: GetVerifiedScores :many
select 
  s.id,
  s.title,
  s.price,
  a.name,
  a.email
from score s
inner join contributor c on c.id = s.contributor_id
inner join account a  on a.id = s.contributor_id
where s.is_verified = true and c.is_verified = true 
limit $2::int offset $1::int
`

type GetVerifiedScoresParams struct {
	Pageoffset int32 `db:"pageoffset" json:"pageoffset"`
	Pagelimit  int32 `db:"pagelimit" json:"pagelimit"`
}

type GetVerifiedScoresRow struct {
	ID    uuid.UUID      `db:"id" json:"id"`
	Title string         `db:"title" json:"title"`
	Price pgtype.Numeric `db:"price" json:"price"`
	Name  string         `db:"name" json:"name"`
	Email string         `db:"email" json:"email"`
}

func (q *Queries) GetVerifiedScores(ctx context.Context, arg GetVerifiedScoresParams) ([]GetVerifiedScoresRow, error) {
	rows, err := q.db.Query(ctx, getVerifiedScores, arg.Pageoffset, arg.Pagelimit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVerifiedScoresRow{}
	for rows.Next() {
		var i GetVerifiedScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Name,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: score.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createScore = `-- name: CreateScore :exec
WITH score_insert AS (
  INSERT INTO Score (title)
  VALUES ($2)
  RETURNING id
)
INSERT INTO contributor_score_uploads (contributor_id, score_id)
values($1, (SELECT id FROM score_insert))
`

type CreateScoreParams struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Title string    `db:"title" json:"title"`
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) error {
	_, err := q.db.Exec(ctx, createScore, arg.ID, arg.Title)
	return err
}

const getScoresByContributorId = `-- name: GetScoresByContributorId :many
select s.id, s.title, s.isverified, s.verifiedat, s.created_at, s.updated_at, s.deleted_at
from contributor p
inner join contributor_score_uploads psu on p.id = psu.profile_id
inner join score s on psu.score_id = s.id
where p.id = $1
group by s.id, s.title
`

func (q *Queries) GetScoresByContributorId(ctx context.Context, id uuid.UUID) ([]Score, error) {
	rows, err := q.db.Query(ctx, getScoresByContributorId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Score{}
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Isverified,
			&i.Verifiedat,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVerifiedScores = `-- name: GetVerifiedScores :many
select s.id, s.title, c.id, a.email, a.name from score as s
inner join contributor_score_uploads as csu on s.id = csu.score_id
inner join contributor as c on csu.contributor_id = c.id
inner join profile as p on p.id = c.id
inner join account as a on p.id = a.id
where c.isverified = true 
and s.isverified = true
`

type GetVerifiedScoresRow struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Title string    `db:"title" json:"title"`
	ID_2  uuid.UUID `db:"id_2" json:"id_2"`
	Email string    `db:"email" json:"email"`
	Name  string    `db:"name" json:"name"`
}

func (q *Queries) GetVerifiedScores(ctx context.Context) ([]GetVerifiedScoresRow, error) {
	rows, err := q.db.Query(ctx, getVerifiedScores)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetVerifiedScoresRow{}
	for rows.Next() {
		var i GetVerifiedScoresRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ID_2,
			&i.Email,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

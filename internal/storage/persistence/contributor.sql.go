// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: contributor.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContributor = `-- name: CreateContributor :one
insert into contributor as c (id)
values ($1)
on conflict do nothing
returning c.id
`

func (q *Queries) CreateContributor(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createContributor, id)
	err := row.Scan(&id)
	return id, err
}

const getContributorById = `-- name: GetContributorById :one
select 
  a.id,
  a.email,
  a.name,
  c.is_verified, 
  c.verified_at,
  c.created_at
from contributor as c
inner join account as a on c.id = a.id
where c.id = $1
`

type GetContributorByIdRow struct {
	ID         uuid.UUID          `db:"id" json:"id"`
	Email      string             `db:"email" json:"email"`
	Name       string             `db:"name" json:"name"`
	IsVerified pgtype.Bool        `db:"is_verified" json:"is_verified"`
	VerifiedAt pgtype.Timestamptz `db:"verified_at" json:"verified_at"`
	CreatedAt  time.Time          `db:"created_at" json:"created_at"`
}

func (q *Queries) GetContributorById(ctx context.Context, id uuid.UUID) (GetContributorByIdRow, error) {
	row := q.db.QueryRow(ctx, getContributorById, id)
	var i GetContributorByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.IsVerified,
		&i.VerifiedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUnverifiedContributors = `-- name: GetUnverifiedContributors :many
select id, is_verified, verified_at, created_at, updated_at, deleted_at from contributor as c
where c.is_verified = false
`

func (q *Queries) GetUnverifiedContributors(ctx context.Context) ([]Contributor, error) {
	rows, err := q.db.Query(ctx, getUnverifiedContributors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contributor{}
	for rows.Next() {
		var i Contributor
		if err := rows.Scan(
			&i.ID,
			&i.IsVerified,
			&i.VerifiedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const verifyContributor = `-- name: VerifyContributor :exec
update contributor
set is_verified = true,
    verified_at = now()
where id = $1
`

func (q *Queries) VerifyContributor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyContributor, id)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contributor_apply.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createContributorApply = `-- name: CreateContributorApply :one
insert into contributor_apply
(
  id,
  full_name,
  phone_number,
  musical_background,
  education,
  experience,
  portofolio_link,
  sample_url,
  terms_and_conditions_accepted,
  is_verified
)
values (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6,
  $7,
  $8,
  $9,
  false
)
returning id, is_verified, full_name, phone_number, musical_background, education, experience, portofolio_link, terms_and_conditions_accepted, sample_url, created_at, updated_at
`

type CreateContributorApplyParams struct {
	ID                         uuid.UUID   `db:"id" json:"id"`
	FullName                   string      `db:"full_name" json:"full_name"`
	PhoneNumber                string      `db:"phone_number" json:"phone_number"`
	MusicalBackground          string      `db:"musical_background" json:"musical_background"`
	Education                  pgtype.Text `db:"education" json:"education"`
	Experience                 pgtype.Text `db:"experience" json:"experience"`
	PortofolioLink             pgtype.Text `db:"portofolio_link" json:"portofolio_link"`
	SampleUrl                  pgtype.Text `db:"sample_url" json:"sample_url"`
	TermsAndConditionsAccepted bool        `db:"terms_and_conditions_accepted" json:"terms_and_conditions_accepted"`
}

func (q *Queries) CreateContributorApply(ctx context.Context, arg CreateContributorApplyParams) (ContributorApply, error) {
	row := q.db.QueryRow(ctx, createContributorApply,
		arg.ID,
		arg.FullName,
		arg.PhoneNumber,
		arg.MusicalBackground,
		arg.Education,
		arg.Experience,
		arg.PortofolioLink,
		arg.SampleUrl,
		arg.TermsAndConditionsAccepted,
	)
	var i ContributorApply
	err := row.Scan(
		&i.ID,
		&i.IsVerified,
		&i.FullName,
		&i.PhoneNumber,
		&i.MusicalBackground,
		&i.Education,
		&i.Experience,
		&i.PortofolioLink,
		&i.TermsAndConditionsAccepted,
		&i.SampleUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createContributorFromContributorApply = `-- name: CreateContributorFromContributorApply :exec
with contributor_apply_data as (
  select id, is_verified, full_name, phone_number, musical_background, education, experience, portofolio_link, terms_and_conditions_accepted, sample_url, created_at, updated_at from contributor_apply
  where id = $1::uuid
) 
insert into contributor(id, full_name, phone_number, musical_background, education, experience, portofolio_link, is_verified)
select id, full_name, phone_number, musical_background, education, experience, portofolio_link, true
from contributor_apply_data
`

func (q *Queries) CreateContributorFromContributorApply(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, createContributorFromContributorApply, accountID)
	return err
}

const getContributorApplications = `-- name: GetContributorApplications :many
select id, is_verified, full_name, phone_number, musical_background, education, experience, portofolio_link, terms_and_conditions_accepted, sample_url, created_at, updated_at from contributor_apply
`

func (q *Queries) GetContributorApplications(ctx context.Context) ([]ContributorApply, error) {
	rows, err := q.db.Query(ctx, getContributorApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContributorApply{}
	for rows.Next() {
		var i ContributorApply
		if err := rows.Scan(
			&i.ID,
			&i.IsVerified,
			&i.FullName,
			&i.PhoneNumber,
			&i.MusicalBackground,
			&i.Education,
			&i.Experience,
			&i.PortofolioLink,
			&i.TermsAndConditionsAccepted,
			&i.SampleUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getContributorApplyByAccountID = `-- name: GetContributorApplyByAccountID :one
select id, is_verified, full_name, phone_number, musical_background, education, experience, portofolio_link, terms_and_conditions_accepted, sample_url, created_at, updated_at from contributor_apply where id = $1
`

func (q *Queries) GetContributorApplyByAccountID(ctx context.Context, accountID uuid.UUID) (ContributorApply, error) {
	row := q.db.QueryRow(ctx, getContributorApplyByAccountID, accountID)
	var i ContributorApply
	err := row.Scan(
		&i.ID,
		&i.IsVerified,
		&i.FullName,
		&i.PhoneNumber,
		&i.MusicalBackground,
		&i.Education,
		&i.Experience,
		&i.PortofolioLink,
		&i.TermsAndConditionsAccepted,
		&i.SampleUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateContributorApply = `-- name: UpdateContributorApply :exec
update contributor_apply set 
full_name = $1,
phone_number = $2,
musical_background = COALESCE($3, musical_background),
education = COALESCE($4, education),
experience = COALESCE($5, experience),
experience = COALESCE($6, portofolio_link),
updated_at = now()
where id = $7::uuid
`

type UpdateContributorApplyParams struct {
	FullName          string      `db:"full_name" json:"full_name"`
	PhoneNumber       string      `db:"phone_number" json:"phone_number"`
	MusicalBackground pgtype.Text `db:"musical_background" json:"musical_background"`
	Education         pgtype.Text `db:"education" json:"education"`
	Experience        pgtype.Text `db:"experience" json:"experience"`
	PortofolioLink    pgtype.Text `db:"portofolio_link" json:"portofolio_link"`
	AccountID         uuid.UUID   `db:"account_id" json:"account_id"`
}

func (q *Queries) UpdateContributorApply(ctx context.Context, arg UpdateContributorApplyParams) error {
	_, err := q.db.Exec(ctx, updateContributorApply,
		arg.FullName,
		arg.PhoneNumber,
		arg.MusicalBackground,
		arg.Education,
		arg.Experience,
		arg.PortofolioLink,
		arg.AccountID,
	)
	return err
}

const verifyContributorApply = `-- name: VerifyContributorApply :exec
update contributor_apply set 
is_verified = true,
updated_at = now()
where id = $1::uuid
`

func (q *Queries) VerifyContributorApply(ctx context.Context, accountID uuid.UUID) error {
	_, err := q.db.Exec(ctx, verifyContributorApply, accountID)
	return err
}
